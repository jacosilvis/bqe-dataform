config {
  type: "view",
  schema: dataform.projectConfig.vars.TARGET_DATA,
  dependencies: ["reservation_usage"],
  assertions: {
    uniqueKey: ["bq_region", "reservation_id", "commitment_option"]
  },
  tags: ["VIEW_DATA"]
}


SELECT
    pu.bq_region
  , pu.reservation_id
  , commitment_option
  , SUM(pu.total_usage_slot_ms) AS total_usage_slot_ms
  , SUM(pu.total_bytes_processed) AS total_bytes_processed
  , SUM(pu.total_bytes_billed) AS total_bytes_billed
  , MAX(pu.max_slots_per_min) AS max_slots
  , TIMESTAMP_DIFF(TIMESTAMP_ADD(TIMESTAMP("${ dataform.projectConfig.vars.VIEW_END_DATE }"), INTERVAL 1 DAY)
                 , TIMESTAMP("${ dataform.projectConfig.vars.VIEW_START_DATE }"), MINUTE) AS n_sample_minutes
  , SUM(IF(pu.max_slots_per_min > commitment_option, pu.max_slots_per_min - commitment_option, 0)) AS autoscale_amount
FROM ${ ref({ schema: dataform.projectConfig.vars.TARGET_DATA, name: "reservation_usage" }) } AS pu
  INNER JOIN (SELECT
                  bq_region
                , reservation_id
                , GENERATE_ARRAY(0, MAX(max_slots_per_min), 100) AS commitment_options
              FROM ${ ref({ schema: dataform.projectConfig.vars.TARGET_DATA, name: "reservation_usage" }) }
              WHERE usage_time_min >= "${ dataform.projectConfig.vars.VIEW_START_DATE }"
                AND usage_time_min <  TIMESTAMP_ADD(TIMESTAMP("${ dataform.projectConfig.vars.VIEW_END_DATE }"), INTERVAL 1 DAY)
              GROUP BY bq_region
                     , reservation_id) AS co
    ON  pu.bq_region = co.bq_region
    AND pu.reservation_id = co.reservation_id
  CROSS JOIN UNNEST(co.commitment_options) AS commitment_option
WHERE pu.usage_time_min >= "${ dataform.projectConfig.vars.VIEW_START_DATE }"
  AND pu.usage_time_min <  TIMESTAMP_ADD(TIMESTAMP("${ dataform.projectConfig.vars.VIEW_END_DATE }"), INTERVAL 1 DAY)
GROUP BY pu.bq_region
       , pu.reservation_id
       , commitment_option
ORDER BY bq_region
       , reservation_id
       , commitment_option
